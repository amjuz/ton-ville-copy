create table "public"."skills" (
  "id" bigint generated by default as identity not null,
  "created_at" timestamp with time zone not null default now(),
  "user_id" uuid default gen_random_uuid(),
  "skill" character varying not null,
  "sub_skills" text [ ]
);
alter table
  "public"."skills" enable row level security;
CREATE UNIQUE INDEX skills_pkey ON public.skills USING btree (id);
alter table
  "public"."skills"
add
  constraint "skills_pkey" PRIMARY KEY using index "skills_pkey";
alter table
  "public"."skills"
add
  constraint "skills_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "public"."profiles"(id) ON
UPDATE
  CASCADE ON DELETE CASCADE not valid;
alter table
  "public"."skills" validate constraint "skills_user_id_fkey";
alter table
  "public"."skills"
add
  constraint "skills_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES "public"."telegrams"(user_id) ON
UPDATE
  CASCADE ON DELETE CASCADE not valid;
alter table
  "public"."skills" validate constraint "skills_user_id_fkey1";
grant delete on table "public"."skills" to "anon";
grant
insert
  on table "public"."skills" to "anon";
grant references on table "public"."skills" to "anon";
grant
select
  on table "public"."skills" to "anon";
grant trigger on table "public"."skills" to "anon";
grant truncate on table "public"."skills" to "anon";
grant
update
  on table "public"."skills" to "anon";
grant delete on table "public"."skills" to "authenticated";
grant
insert
  on table "public"."skills" to "authenticated";
grant references on table "public"."skills" to "authenticated";
grant
select
  on table "public"."skills" to "authenticated";
grant trigger on table "public"."skills" to "authenticated";
grant truncate on table "public"."skills" to "authenticated";
grant
update
  on table "public"."skills" to "authenticated";
grant delete on table "public"."skills" to "service_role";
grant
insert
  on table "public"."skills" to "service_role";
grant references on table "public"."skills" to "service_role";
grant
select
  on table "public"."skills" to "service_role";
grant trigger on table "public"."skills" to "service_role";
grant truncate on table "public"."skills" to "service_role";
grant
update
  on table "public"."skills" to "service_role";
create policy "Enable read access for all users" on "public"."skills" as permissive for
select
  to authenticated using (true);
create policy "Owner have full access to the raw" on "public"."skills" as permissive for all to public using ((auth.uid() = user_id));
