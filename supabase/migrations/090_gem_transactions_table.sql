-- Create gem_transactions table
CREATE TABLE IF NOT EXISTS "public"."gem_transactions" (
  "id" BIGINT NOT NULL,
  "user_id" "uuid" NOT NULL,
  "activity" "public"."gem_activity" NOT NULL,
  "gems" INTEGER NOT NULL,
  CONSTRAINT "gem_transactions_gems_check" CHECK (("gems" >= 0)),
  CONSTRAINT "gem_transactions_gems_positive" CHECK (("gems" >= 0))
) inherits ("public"."bases");
ALTER TABLE
  "public"."gem_transactions" owner TO "postgres";
-- Comments
comment ON TABLE "public"."gem_transactions" IS 'Records of gem earnings per user activity';
-- Identity column
ALTER TABLE
  "public"."gem_transactions"
ALTER COLUMN
  "id"
ADD
  GENERATED BY DEFAULT AS IDENTITY (
    sequence name "public"."gem_transactions_id_seq" start WITH 1 increment by 1 no minvalue no maxvalue cache 1
  );
-- Primary Key
ALTER TABLE
  ONLY "public"."gem_transactions"
ADD
  CONSTRAINT "gem_transactions_pkey" PRIMARY KEY ("id");
-- Foreign Keys
ALTER TABLE
  ONLY "public"."gem_transactions"
ADD
  CONSTRAINT "gem_transactions_user_id_fkey" FOREIGN key ("user_id") REFERENCES "public"."profiles" ("id") ON DELETE cascade;
-- Indexes
CREATE INDEX "idx_gem_transactions_user_id" ON "public"."gem_transactions" USING btree ("user_id");
CREATE INDEX "idx_gem_transactions_activity" ON "public"."gem_transactions" USING btree ("activity");
CREATE INDEX "idx_gem_transactions_created_at" ON "public"."gem_transactions" USING btree ("created_at");
CREATE INDEX "idx_gem_transactions_activity_created_at" ON "public"."gem_transactions" USING btree ("activity", "created_at");
-- Trigger for updated_at
CREATE
OR REPLACE trigger "handle_updated_at" before
UPDATE
  ON "public"."gem_transactions" FOR each ROW EXECUTE function "extensions"."moddatetime" ('updated_at');
-- Enable RLS
ALTER TABLE
  "public"."gem_transactions" enable ROW level security;
-- RLS Policies
CREATE POLICY "gem_transactions_read_policy" ON "public"."gem_transactions" FOR
SELECT
  TO "authenticated" USING (("user_id" = "auth"."uid" ()));
-- Grants
GRANT
SELECT
  ON TABLE "public"."gem_transactions" TO "authenticated";
